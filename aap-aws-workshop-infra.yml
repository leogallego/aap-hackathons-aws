---
- name: Create AWS resources for the AAP as a Service training events
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:

    - name: Create The AWS VPC "ansible-aas-vpc"
      amazon.aws.ec2_vpc_net:
        name: "{{ ec2_name_prefix | default('ansible-aas-vpc') }}"
        cidr_block:
          - "{{ ec2_subnet | default('10.200.0.0/20') }}"
        region: "{{ ec2_region | default('us-east-2') }}"
        tags:
          Name: "ansible-aas-vpc"
        tenancy: default
      register: created_vpc
      until: created_vpc is not failed
      retries: 5

    - name: Create EC2 security group "ansible-aas-sg"
      amazon.aws.ec2_security_group:
        name: "{{ ec2_name_prefix | default('ansible-aas-sg') }}"
        region: "{{ ec2_region | default('us-east-2') }}"
        description: AWS SG for the training events
        vpc_id: "{{ created_vpc.vpc.id }}"
        tags:
          Name: "{{ ec2_name_prefix | default('ansible-aas-sg') }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0
          ## postgresql
          #- proto: tcp
          #  ports:
          #    - 5432
          #  cidr_ip: 0.0.0.0/0
          #- proto: tcp
          #  ports:
          #    - 8433
          #  cidr_ip: 0.0.0.0/0
          #- proto: tcp
          #  ports:
          #    - 27199
          #  cidr_ip: 0.0.0.0/0
          ## grpc
          #- proto: tcp
          #  ports:
          #    - 50051
          #  cidr_ip: 0.0.0.0/0
          #- proto: tcp
          #  ports:
          #    - 8080-8082
          #  cidr_ip: 0.0.0.0/0
          #- proto: tcp
          #  ports:
          #    - 8443-8445
          #  cidr_ip: 0.0.0.0/0
      register: created_sg
      until: created_sg is not failed
      retries: 5

    # The following 3 tasks are subdiving up the CIDR Block
    - name: Create the PUBLIC subnet for ansible-aas-vpc
      amazon.aws.ec2_vpc_subnet:
        region: "{{ ec2_region | default('us-east-2') }}"
        vpc_id: "{{ created_vpc.vpc.id }}"
        cidr: "{{ ec2_cidr | default('10.200.0.0/24') }}"
        tags:
          Name: "{{ ec2_name_prefix | default('public') }}"
      register: public_subnet
      until: public_subnet is not failed
      retries: 15

    # - name: Create THE PRIVATE subnet for ansible-aas-vpc
    #   amazon.aws.ec2_vpc_subnet:
    #     region: "{{ ec2_region | default('us-east-2') }}"
    #     vpc_id: "{{ created_vpc.vpc.id }}"
    #     cidr: "{{ ec2_cidr | default('10.200.2.0/23') }}"
    #     tags:
    #       Name: "{{ ec2_name_prefix | default('private') }}"
    #   register: private_subnet
    #   until: private_subnet is not failed
    #   retries: 15

    # - name: Create the EXECUTION-NODES subnet for ansible-aas-vpc
    #   amazon.aws.ec2_vpc_subnet:
    #     region: "{{ ec2_region | default('us-east-2') }}"
    #     vpc_id: "{{ created_vpc.vpc.id }}"
    #     cidr: "{{ ec2_cidr | default('10.200.1.0/24') }}"
    #     tags:
    #       Name: "{{ ec2_name_prefix | default('execution-nodes') }}"
    #   register: execution_nodes_subnet
    #   until: execution_nodes_subnet is not failed
    #   retries: 15

    - name: Create the Internet Gateway for {{ created_vpc.vpc.id }}
      amazon.aws.ec2_vpc_igw:
        region: "{{ ec2_region | default('us-east-2') }}"
        vpc_id: "{{ created_vpc.vpc.id }}"
        tags:
          Name: "{{ ec2_name_prefix | default('ansible-aas-igw') }}"
      register: igw
      until: igw is not failed
      retries: 15

    # - name: Create the NAT Gateway and allocate a new EIP (if one doesn't exist)
    #   amazon.aws.ec2_vpc_nat_gateway:
    #     region: "{{ ec2_region | default('us-east-2') }}"
    #     subnet_id: "{{ public_subnet.subnet.id }}"
    #     wait: true
    #     tags:
    #       Name: "{{ ec2_name_prefix | default('ansible-aas-natgw') }}"
    #     if_exist_do_not_create: true
    #   register: natgw
    #   until: natgw is not failed
    #   retries: 15

    - name: VPC Public Subnet Route Table is present for {{ created_vpc.vpc.id }}
      amazon.aws.ec2_vpc_route_table:
        region: "{{ ec2_region | default('us-east-2') }}"
        vpc_id: "{{ created_vpc.vpc.id }}"
        subnets:
          - "{{ public_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ ec2_name_prefix | default('public-rt') }}"
      register: public_routetable
      until: public_routetable is not failed
      retries: 5

    # - name: VPC Private Subnet Route Table is present for {{ created_vpc.vpc.id }}
    #   amazon.aws.ec2_vpc_route_table:
    #     region: "{{ ec2_region | default('us-east-2') }}"
    #     vpc_id: "{{ created_vpc.vpc.id }}"
    #     subnets:
    #       - "{{ private_subnet.subnet.id }}"
    #       - "{{ execution_nodes_subnet.subnet.id }}"
    #     routes:
    #       - dest: 0.0.0.0/0
    #         gateway_id: "{{ natgw.nat_gateway_id }}"
    #     tags:
    #       Name: "{{ ec2_name_prefix | default('private-rt') }}"
    #   register: private_routetable
    #   until: private_routetable is not failed
    #   retries: 5
